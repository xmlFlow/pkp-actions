name: 'PKP Github actions'
description: 'PKP CI/CD Pipeline'
inputs:
  pkp-application:
    required: true
  pkp-repository: 
    defalut : ${{ github.repository_owner }}
  pkp-branch: 
    defalut : [ '${{ github.head_ref || github.ref_name }}' ]
    
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
strategy:
  fail-fast: false
matrix:
  php-versions: [ '8.1','8.2' ]
  dbs: [ 'pgsql']
env:
  DBUSERNAME: ojs-ci
  DBPASSWORD: ojs-ci
  DBNAME: ojs-ci
  DBHOST: 127.0.0.1
  DATABASEDUMP: database.sql.gz
  FILESDIR: files
  FILESDUMP: files.tar.gz
  CYPRESS_BASE_URL: http://127.0.0.1:8000
  CYPRESS_DBNAME: ojs-ci
  CYPRESS_DBUSERNAME: ojs-ci
  CYPRESS_DBPASSWORD: ojs-ci
  CYPRESS_DBHOST: 127.0.0.1
  CYPRESS_FILESDIR: files


runs:
  using: "composite"
  steps:
    - name: Install postgres server
      if: ${{matrix.dbs == 'pgsql'}}
      run: |
        sudo apt install postgresql postgresql-contrib
        sudo dpkg-reconfigure locales
        sudo sed -i -E 's\peer|scram-sha-256\trust\g' /etc/postgresql/14/main/pg_hba.conf
      shell: bash

    - name: Install  mysql server
      if: ${{matrix.dbs == 'mysql'}}
      run: |
        sudo apt install -q -y mysql-server mysql-client
        sudo service mysql start
        sudo mysqladmin -u root -p'root' password ''
      shell: bash

    - name: Install mariadb  server
      if: ${{matrix.dbs == 'mariadb'}}
      uses: ankane/setup-mariadb@v1
      with:
        mariadb-version: "10.11"

    - name: Setup PHP, extensions and composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{matrix.php-versions}}
        extensions: bcmath, bz2, common, cli, curl, fpm, gd, intl, mbstring, mysql,mysqlnd, mysqli, opcache, pdo_mysql, pgsql, json,soap, xml, zip
        coverage: xdebug
      env:
        update: true

    - name: Install ${{inputs.pkp-application}}
      run: |
        git clone -b ${{inputs.pkp-branch || github.head_ref || github.ref_name }} https://github.com/${{inputs.pkp-repository}}/${{inputs.pkp-application}} ~/${{inputs.pkp-application}}
        cd ~/${{inputs.pkp-application}}
        git submodule update --init --recursive
      shell: bash

    - name: Install composer dependencies
      run: |
        cd ~/${{inputs.pkp-application}}
        lib/pkp/tools/travis/install-composer-dependencies.sh
        npm i g -npm && npm i @vue/cli-service && npm i cypress && npm install && npm run build
      shell: bash
    
    - name: Create additional directories
      run: mkdir -p ~/bin
      shell: bash

    - name: Install Validation tools
      run: |
        set -e
        sudo pip install six
        sudo pip install https://github.com/google/closure-linter/zipball/master
        wget "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jslint4java/jslint4java-2.0.2-dist.zip"
        unzip jslint4java-2.0.2-dist.zip
        mv jslint4java-2.0.2/jslint4java-2.0.2.jar ~/bin/jslint4java.jar
      shell: bash

    - name: Run XML validation
      run: |
        cd ~/${{inputs.pkp-application}}
        ./lib/pkp/tools/travis/validate-xml.sh
      shell: bash

    - name: Run Javascript/JSON validation
      run: |
        cd ~/${{inputs.pkp-application}}
        ./lib/pkp/tools/buildjs.sh -n
        ./lib/pkp/tools/travis/validate-json.sh
      shell: bash

    - name: Run linting
      run: |
        cd ~/${{inputs.pkp-application}}
        npm run lint
      shell: bash

    - name: Run Documentation validation
      run: |
        cd ~/${{inputs.pkp-application}}
          # Look for help filenames referred to in templates and check that they all exist (in English)
          ERRORS=0
          for filename in `find . -name \*.tpl -exec sed -n -e "s/.*{help[^}]file=\"\([^\"#]\+\)[#\"].*/\1/p" "{}" ";"`; do
           if [ ! -f docs/manual/en/$filename.md ]; then
             echo "Help file \"$filename.md\" referred to in template does not exist!"
             ERRORS=1
            fi
          done
          if [ $ERRORS -ne 0 ]; then
            exit -1
          fi
          # Generate a quick report of the differences between the files listed in templates and the available files.
          find . -name \*.tpl -exec sed -n -e "s/.*{help[^}]file=\"\([^\"]\+\)\".*/\1/p" "{}" ";" | sort | uniq > /tmp/template-help-references.txt
          cat docs/manual/en/SUMMARY.md | sed -n -e "s/.*(\([^)]\+\))/\1/p" | sort | uniq > /tmp/help-files.txt
          echo "Unreferenced help files:"
          diff /tmp/template-help-references.txt /tmp/help-files.txt | grep -e "^>"
      shell: bash
